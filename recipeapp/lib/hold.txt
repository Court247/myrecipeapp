Future showOptions() async {
    showCupertinoModalPopup(
      context: context,
      builder: (context) => CupertinoActionSheet(
        actions: [
          CupertinoActionSheetAction(
            child: const Text('Photo Gallery'),
            onPressed: () async {
              // close the options modal
              Navigator.of(context).pop();
              // get image from gallery
              XFile? temp = await getImageFromGallery();
              // if (temp != null) {
              //   await storeFireBase(temp);
              // }
            },
          ),
          CupertinoActionSheetAction(
            child: const Text('Camera'),
            onPressed: () async {
              // close the options modal
              Navigator.of(context).pop();
              // get image from camera
              XFile? temp = await getImageFromCamera() as XFile?;
              // if (temp != null) {
              //   await storeFireBase(temp);
              // }
            },
          ),
        ],
      ),
    );
  }

   Future getImageFromCamera() async {
    final pickedFile = await picker.pickImage(source: ImageSource.camera);

    setState(() {
      if (pickedFile != null) {
        imageFile = XFile(pickedFile.path);
      }
    });
    return imageFile;
  }

    //this for when the user uploads a photo from their phone gallery
  Future getImageFromGallery() async {
    final pickedFile = await picker.pickImage(source: ImageSource.gallery);

    setState(() {
      if (pickedFile != null) {
        imageFile = XFile(pickedFile.path);
      }
    });

    return imageFile;

  }

    //this is the like button
  _like(var post) {
    final favs = Provider.of<FavoritesProvider>(context, listen: false);
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      child: FavoriteButton(
        iconColor: Colors.pinkAccent.shade400,
        iconSize: 35.5,
        isFavorite: post.posts.isFavorite,
        valueChanged: (fav) {
          post.posts.isFavorite = fav;
          if (fav) {
            post.posts.canAdd = false;
          }
          favs.addFav(post);
          print(favs.recipes.length);
        },
      ),
    );
  }

    //This is the author of the recipe
  _postAuthor(var post) {
    return Row(
      children: [
        const CircleAvatar(
          radius: 20,
          backgroundImage: NetworkImage("https://picsum.photos/200"),
        ),
        const SizedBox(
          width: 10,
        ),
        Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              post.poster,
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
          ],
        ),
      ],
    );
  }

List<Map<String, dynamic>> jsonList = provider.recipes
                              .map((item) => item.posts.toJson())
                              .toList();
                          var authUser = auth.currentUser;
                          db
                              .collection('users')
                              .doc(authUser!.uid)
                              .update({'favorites': jsonList});

addToPostCollection() {
    for (int i = 0; i < recipeList.length + 1; i++) {
      db
          .collection('posts')
          .doc((i + 1).toString())
          .set(recipeList[i].toJson());
    }
  }

//gets the top 10 recipes from the database and adds it to the list
  //If the recipe is already in the list it won't add it again
  extraData() async {
    var uData = await getUserData();
    for (int i = 0; i < 10; i++) {
      var docRef = db.collection('recipes').doc(i.toString());
      DocumentSnapshot documentSnapshot = await docRef.get();

      if (documentSnapshot.exists) {
        recipe = documentSnapshot.data();
        data = Post.fromJson2(auth.currentUser, recipe);
        if (!provider.posts
            .any((post) => post.posts.recipeName == data.posts.recipeName)) {
          provider.addPost(data);
        }

        recipes = provider.posts
            .where((recipe) =>
                recipe.posts.location == uData['location'] ||
                recipe.posts.location == null)
            .toList();
      } else {
        print('Document does not exist on the database');
      }
    }

    setState(() {
      recipeList = recipes;
    });

    addToPostCollection();
  }